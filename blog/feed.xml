<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Finagle blog</title>
  <id>https://finagle.github.io/blog</id>
  <link href="https://finagle.github.io/blog"/>
  <link href="https://finagle.github.io/blog/blog/feed.xml" rel="self"/>
  <updated>2016-02-08T16:00:00-08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Make application errors great again</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2016/02/09/response-classification/"/>
    <id>https://finagle.github.io/blog/2016/02/09/response-classification/</id>
    <published>2016-02-08T16:00:00-08:00</published>
    <updated>2016-02-09T13:24:32-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p align="center"&gt;
  &lt;img src="/assets/img/make.png" style="margin: 1em 0em;" alt="make application errors great again"/&gt;
&lt;/p&gt;

&lt;p&gt;Finagle’s new response classifiers improve client’s avoidance of
faulty nodes thus increasing your success rate. To get this benefit,
you must wire up the application’s rules into your clients and how to
do so is explained below.&lt;/p&gt;

&lt;p&gt;First, a pop quiz — does Finagle treat an HTTP 500 response as a
success or failure? How about a Thrift Exception?&lt;/p&gt;

&lt;p&gt;If you answered &lt;strong&gt;failures&lt;/strong&gt;, sadly, you are in for a surprise. Finagle
lacks application level domain knowledge of what kinds of responses
are failures. Without this, Finagle uses a conservative policy and
treats all &lt;a href="https://github.com/twitter/util/blob/8e33b34a0379f920ccb2dfae531a5c003db36152/util-core/src/main/scala/com/twitter/util/Try.scala#L64-L68"&gt;&lt;code&gt;Returns&lt;/code&gt;&lt;/a&gt; as successful
and all &lt;a href="https://github.com/twitter/util/blob/8e33b34a0379f920ccb2dfae531a5c003db36152/util-core/src/main/scala/com/twitter/util/Try.scala#L64-L68"&gt;&lt;code&gt;Throws&lt;/code&gt;&lt;/a&gt; as failures. Unfortunately, both HTTP 500s and Thrift
Exceptions are &lt;code&gt;Returns&lt;/code&gt;, and thus, successful responses.&lt;/p&gt;

&lt;p&gt;By having you, the developers, give Finagle this application level
knowledge, it can then accurately track failures in its &lt;a href="http://twitter.github.io/finagle/guide/Clients.html#failure-accrual"&gt;failure
accrual module&lt;/a&gt; which directly helps your client’s success rate.
Finagle’s built-in &lt;a href="http://twitter.github.io/finagle/guide/Metrics.html#statsfilter"&gt;success rate&lt;/a&gt; metrics (e.g. &lt;code&gt;clnt/tweetsvc/success&lt;/code&gt;)
also become accurate and this in turn means you may be able remove
additional success rate metrics you may be wrapping on top of a
Finagle client.&lt;/p&gt;

&lt;p&gt;In the future, we are considering wiring this into load balancing
which enables us to penalize servers which are returning failures or
&lt;a href="http://www.control.lth.se/media/Staff/AlessandroPapadopoulos/publications/2014-SRDS-KPDDMAHRE.pdf"&gt;partial results&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Cool story. How do I use it?&lt;/h3&gt;

&lt;p&gt;As of &lt;a href="http://localhost:4567/blog/2016/02/05/release-notes-6-33/"&gt;release 6.33&lt;/a&gt; you wire up a &lt;a href="https://github.com/twitter/finagle/blob/bb91e967618f8884af98e655eb989dd20cd79e61/finagle-core/src/main/scala/com/twitter/finagle/service/package.scala#L5-L35"&gt;&lt;code&gt;ResponseClassifier&lt;/code&gt;&lt;/a&gt;
to your client. For HTTP clients, using
&lt;a href="https://github.com/twitter/finagle/blob/bb91e967618f8884af98e655eb989dd20cd79e61/finagle-http/src/main/scala/com/twitter/finagle/http/service/HttpResponseClassifier.scala#L15-L19"&gt;&lt;code&gt;HttpResponseClassifier.ServerErrorsAsFailures&lt;/code&gt;&lt;/a&gt; often works great as it
classifies any HTTP 5xx response code as a failure. For
Thrift/ThriftMux clients you may want to use
&lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-thriftmux/src/main/scala/com/twitter/finagle/thriftmux/service/ThriftMuxResponseClassifier.scala"&gt;&lt;code&gt;ThriftResponseClassifier.ThriftExceptionsAsFailures&lt;/code&gt;&lt;/a&gt; which classifies
any deserialized Thrift Exception as a failure. For a large set of use
cases these should suffice. Classifiers get wired up to your client in
a straightforward manner, for example:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Scala
&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.ThriftMux&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.builder.ClientBuilder&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.thrift.service.ThriftResponseClassifier&lt;/span&gt;

&lt;span class="c1"&gt;// Discoverable Parameters API
&lt;/span&gt;&lt;span class="nc"&gt;ThriftMux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ThriftResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ThriftExceptionsAsFailures&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// ClientBuilder API
&lt;/span&gt;&lt;span class="nc"&gt;ClientBuilder&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;responseClassifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ThriftResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ThriftExceptionsAsFailures&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Java&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.builder.ClientBuilder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.http.service.HttpResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Discoverable Parameters API&lt;/span&gt;
&lt;span class="n"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ServerErrorsAsFailures&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// ClientBuilder API&lt;/span&gt;
&lt;span class="n"&gt;ClientBuilder&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;responseClassifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ServerErrorsAsFailures&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a classifier is not specified on a client or if a user’s classifier
isn’t defined for a given request/response pair then
&lt;a href="https://github.com/twitter/finagle/blob/246986aa055e865f521eba0e09d7c0b42880e0ac/finagle-core/src/main/scala/com/twitter/finagle/service/ResponseClassifier.scala#L18-L36"&gt;&lt;code&gt;ResponseClassifier.Default&lt;/code&gt;&lt;/a&gt; is used. This gives us the same behavior
Finagle had prior to classification — responses that are &lt;code&gt;Returns&lt;/code&gt; are
successful and &lt;code&gt;Throws&lt;/code&gt; are failures.&lt;/p&gt;

&lt;h3&gt;Rad. How do I write a custom classifier?&lt;/h3&gt;

&lt;p&gt;To do this we should understand the few classes used. A
&lt;code&gt;ResponseClassifier&lt;/code&gt; is a &lt;code&gt;PartialFunction&lt;/code&gt; from &lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/service/ReqRep.scala"&gt;&lt;code&gt;ReqRep&lt;/code&gt;&lt;/a&gt; to
&lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/service/ResponseClass.scala"&gt;&lt;code&gt;ResponseClass&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s work our way backwards through those, beginning with
&lt;code&gt;ResponseClass&lt;/code&gt;. This can be either &lt;code&gt;Successful&lt;/code&gt; or &lt;code&gt;Failed&lt;/code&gt; and those
values are self-explanatory. There are three constants which will
cover the vast majority of usage: &lt;code&gt;Success&lt;/code&gt;, &lt;code&gt;NonRetryableFailure&lt;/code&gt; and
&lt;code&gt;RetryableFailure&lt;/code&gt;. While as of today there is no distinction made
between retryable and non-retryable failures, it was a good
opportunity to lay the groundwork for use in the future.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;ReqRep&lt;/code&gt; is a request/response struct with a request of type &lt;code&gt;Any&lt;/code&gt;
and a response of type &lt;code&gt;Try[Any]&lt;/code&gt;. While the lack of typing may
initially disturb you, our hope is that it is not an issue in
practice. While all of this functionality is called response
classification, you’ll note that classifiers make judgements on both a
request and response.&lt;/p&gt;

&lt;p&gt;Writing a custom &lt;code&gt;PartialFunction&lt;/code&gt; is easy in Scala given its syntactic
sugar. As with many things it is a bit more work from Java but is
doable. Here is an example that counts HTTP 503s as failures (for Java
examples, take a look at &lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-http/src/test/java/com/twitter/finagle/http/service/HttpResponseClassifierCompilationTest.java"&gt;&lt;code&gt;HttpResponseClassifierCompilationTest&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-core/src/test/java/com/twitter/finagle/service/ResponseClassifierCompilationTest.java"&gt;&lt;code&gt;ResponseClassifierCompilationTest&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Scala
&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.service.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ReqRep&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ResponseClass&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.util.Return&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ResponseClassifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;ReqRep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;http.Response&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;ResponseClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NonRetryableFailure&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this &lt;code&gt;PartialFunction&lt;/code&gt; isn’t total which is ok due to
Finagle always using user defined classifiers in combination with
&lt;code&gt;ResponseClassifier.Default&lt;/code&gt; which will cover all cases.&lt;/p&gt;

&lt;p&gt;Thrift and ThriftMux classifiers require a bit more care as the
request and response types are not as obvious. This is because there
is only a single &lt;code&gt;Service&lt;/code&gt; from &lt;code&gt;Array[Byte]&lt;/code&gt; to &lt;code&gt;Array[Byte]&lt;/code&gt; for all the
methods of an IDL’s service. To make this workable, there is support
in &lt;a href="http://twitter.github.io/scrooge/"&gt;Scrooge&lt;/a&gt; and &lt;code&gt;Thrift&lt;/code&gt;/&lt;code&gt;ThriftMux.newService&lt;/code&gt; and
&lt;code&gt;Thrift&lt;/code&gt;/&lt;code&gt;ThriftMux.newClient&lt;/code&gt; code to deserialize the responses into the
expected application types so that classifiers can be written in terms
of the Scrooge generated request type, &lt;code&gt;$Service.$Method.Args&lt;/code&gt;, and the
method&amp;rsquo;s response type. Given an IDL:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exception NotFoundException { 1: string reason }

service SocialGraph {
  i32 follow(1: i64 follower, 2: i64 followee) throws (1: NotFoundException ex)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One possible classifier would be:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ResponseClassifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// #1
&lt;/span&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;ReqRep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Throw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_:&lt;/span&gt; &lt;span class="kt"&gt;NotFoundException&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;ResponseClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NonRetryableFailure&lt;/span&gt;
  &lt;span class="c1"&gt;// #2
&lt;/span&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;ReqRep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;ResponseClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NonRetryableFailure&lt;/span&gt;
  &lt;span class="c1"&gt;// #3
&lt;/span&gt;  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;ReqRep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SocialGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Follow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Args&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;ResponseClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NonRetryableFailure&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you examine that classifier you’ll note a few things. First (#1),
the deserialized &lt;code&gt;NotFoundException&lt;/code&gt; can be treated as a failure. Next
(#2), a “successful” response can be examined to enable services using
status codes to classify errors. Lastly (#3), the request can be
introspected to make the decision.&lt;/p&gt;

&lt;h3&gt;But what’s it really gonna do?&lt;/h3&gt;

&lt;p&gt;It’s important to understand what the impact will be if you customize
response classification for your client. Perhaps most importantly,
when responses are classified as failures, this affects how failure
accrual sees responses. In the past, you may have had a Thrift service
returning nothing but exceptions, but this node would continue getting
traffic due to failure accrual’s lack of visibility. While this
changes lets you fix this visibility, you should consider what causes
those responses. For example, if the service is simply proxying a
failure from its downstream service, you may not want to count that as
a failure.&lt;/p&gt;

&lt;p&gt;There isn’t a strict rule on what is the right thing to do with
classification. However, with some minimal thought, many services can
improve their success rate both in terms of how it’s reported as well
as through avoidance of bad nodes.&lt;/p&gt;

&lt;h3&gt;Alright.&lt;/h3&gt;

&lt;p&gt;We’re really hopeful that this makes a significant difference in how
well Finagle works for you but it needs you, the application
developers, to make these choices.&lt;/p&gt;

&lt;p&gt;If you have any questions on how to use this or feedback on how it’s working,
please get in touch through &lt;a href="https://twitter.com/finagle"&gt;@finagle&lt;/a&gt; or the
&lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;Finaglers mailing list&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Retry Budgets</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2016/02/08/retry-budgets/"/>
    <id>https://finagle.github.io/blog/2016/02/08/retry-budgets/</id>
    <published>2016-02-07T16:00:00-08:00</published>
    <updated>2016-02-08T09:43:17-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ever had your service attacked by a retry storm from your clients? Or
your clients’ clients? Or has your service ever been the attacker in
one of those situations?&lt;/p&gt;

&lt;p&gt;Thought so.&lt;/p&gt;

&lt;p&gt;To help you avoid this, in release 6.31 we’ve introduced the notion of
a &lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/service/RetryBudget.scala"&gt;&lt;code&gt;RetryBudget&lt;/code&gt;&lt;/a&gt;
that controls when it is okay for a client to retry a failed request.&lt;/p&gt;

&lt;p&gt;The default budget allows for 20% of requests to be retried on top of
a minimum of 10 retries per second. This is built on top of a token
bucket where credits expire after 10 seconds. In practice this should
allow for plenty of retries in the face of transient errors without
causing cascading failures when there are persistent issues.&lt;/p&gt;

&lt;p&gt;Developers can wire up their own budget:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.service.RetryBudget&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;RetryBudget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withRetryBudget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"twitter.com"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following code shows how to use the factory method
&lt;code&gt;RetryBudget.apply&lt;/code&gt; in order to construct a custom instance of
&lt;code&gt;RetryBudget&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.conversions.time._&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.service.RetryBudget&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;budget&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;RetryBudget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RetryBudget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;ttl&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;minRetriesPerSec&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;percentCanRetry&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RetryBudget&lt;/code&gt; factory method takes three arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ttl&lt;/code&gt; — a time to live for deposited tokens&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minRetriesPerSec&lt;/code&gt; — the minimum rate of retries allowed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;percentCanRetry&lt;/code&gt; — the percentage of requests that might be retried&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;RetryBudgets&lt;/code&gt; are wired up to &lt;code&gt;RetryFilter&lt;/code&gt; and &lt;code&gt;RetryExceptionsFilter&lt;/code&gt;
which allows them to be used outside of a Finagle client as well.
Further details on retries and retry budgets are covered in the
&lt;a href="http://twitter.github.io/finagle/guide/Clients.html#retries"&gt;user guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please let us know if you have any questions, either by filing a GitHub issue or
getting in touch through &lt;a href="https://twitter.com/finagle"&gt;@finagle&lt;/a&gt; or the
&lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;Finaglers mailing list&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Finagle 6.33 Release Notes</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2016/02/05/release-notes-6-33/"/>
    <id>https://finagle.github.io/blog/2016/02/05/release-notes-6-33/</id>
    <published>2016-02-04T16:00:00-08:00</published>
    <updated>2016-02-04T19:19:00-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In this milestone, we&amp;rsquo;ve been focusing on two major directions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Improving the user experience by providing friendly APIs and updating docs&lt;/li&gt;
&lt;li&gt;Continuing to improve Finagle&amp;rsquo;s resiliency&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Discoverable Params&lt;/h3&gt;

&lt;p&gt;There is a new user-friendly API for configuring Finagle clients and servers using &lt;code&gt;with&lt;/code&gt;-prefixed
methods (&lt;code&gt;.withClientId&lt;/code&gt;, &lt;code&gt;.withStatsReceiver&lt;/code&gt;, etc). Discoverable configuration parameters are a
modern alternative to ClientBuilder/ServerBuilder which provides an easy to use, type safe, and IDE
discoverable API on top of &lt;code&gt;$Protocol.{client,server}.configured&lt;/code&gt; through a collection of
&lt;code&gt;with&lt;/code&gt;-prefixed methods available on both clients and servers. It’s already in master and we
encourage you to open your favorite IDE and type &lt;code&gt;client.with&lt;/code&gt; or &lt;code&gt;server.with&lt;/code&gt; and start discovering.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.conversions.time._&lt;/span&gt;

&lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withLabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http-client"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withSessionQualifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noFailFast&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquisitionTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See it in action!&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src="http://i.imgur.com/yIE7iy8.gif" /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;We thought carefully about how to make these clear and easy to use. If you&amp;rsquo;re curious about the
design, please feel free to take a look at the &lt;a href="http://twitter.github.io/finagle/guide/Configuration.html#design-principles"&gt;design principles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new API is fully documented so that every method has an up-to-date scaladoc comment explaining
the parameters it configures as well as mentioning their default values.&lt;/p&gt;

&lt;p&gt;Also, it&amp;rsquo;s worth mentioning that this API is 100% Java-friendly. You can now forget about
&lt;code&gt;new Param(...).mk(...)&lt;/code&gt; and focus on what’s important–values, not the wrappers around them.&lt;/p&gt;

&lt;h3&gt;New User Guide&lt;/h3&gt;

&lt;p&gt;We updated/reworked &lt;a href="http://twitter.github.io/finagle/guide/"&gt;Finagle’s User Guide&lt;/a&gt; recently to capture the current state of
Finagle. For example, we updated both &lt;a href="http://twitter.github.io/finagle/guide/Clients.html"&gt;Clients&lt;/a&gt; and &lt;a href="http://twitter.github.io/finagle/guide/Servers.html"&gt;Servers&lt;/a&gt; with example
configurations of their modules.&lt;/p&gt;

&lt;h3&gt;Response Classifiers&lt;/h3&gt;

&lt;p&gt;Finagle’s new &lt;a href="http://twitter.github.io/finagle/guide/Clients.html#response-classification"&gt;response classifiers&lt;/a&gt; improve client’s avoidance of faulty nodes, and
thus, increase your success rate. To get this benefit, you must wire up the application’s rules into
your clients. There are already basic classifiers in Finagle available for HTTP and Thrift.&lt;/p&gt;

&lt;p&gt;For example, the following configuration advises a Finagle client treat 500s HTTP responses as
non-retriable failures.&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.http.service.HttpResponseClassifier&lt;/span&gt;

&lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;HttpResponseClassifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ServerErrorsAsFailures&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Pending Requests Limit&lt;/h3&gt;

&lt;p&gt;As part of our work on client-side admission control, there is a new client module maintaining the
limit of pending requests (i.e., requests that haven&amp;rsquo;t been yet written to a wire). The limit is
unbounded by default.&lt;/p&gt;

&lt;p&gt;In the following example, an HTTP client is configured to have at most 100 pending requests in the
queue. All requests on top of 100 will be rejected by a client.&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;

&lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withAdmissionControl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxPendingRequests&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Changelog&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finagle/blob/develop/CHANGES"&gt;Finagle 6.33&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/util/blob/develop/CHANGES"&gt;Util 6.32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/scrooge/blob/develop/CHANGES"&gt;Scrooge 4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/twitter-server/blob/develop/CHANGES"&gt;TwitterServer 1.18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/ostrich/blob/develop/CHANGES"&gt;Ostrich 9.16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>New FinagleCon venue</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2015/07/15/new-finaglecon-venue/"/>
    <id>https://finagle.github.io/blog/2015/07/15/new-finaglecon-venue/</id>
    <published>2015-07-14T17:00:00-07:00</published>
    <updated>2016-02-04T16:56:27-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We&amp;rsquo;re pleased to announce that this year&amp;rsquo;s &lt;a href="https://finagle.github.io/finaglecon/"&gt;FinagleCon&lt;/a&gt; will now be
hosted at Twitter&amp;rsquo;s new &lt;a href="https://www.google.com/maps/place/875+Stevenson+St,+San+Francisco,+CA+94103/@37.776292,-122.416245,17z/data=!3m1!4b1!4m2!3m1!1s0x8085809c5b48986f:0xb150a76f58e9f2da"&gt;One 10th Street Expansion&lt;/a&gt; in San Francisco.
We believe that this location will be more convenient than the Kaiser Center in
Oakland for many attendees, and we&amp;rsquo;re looking forward to showing off this brand
new space.
&lt;/p&gt;

&lt;p&gt;The One 10th Street Expansion is next door to Twitter HQ at 1355 Market Street,
and is easily accessible from the &lt;a href="http://www.bart.gov/stations/civc"&gt;Civic Center / UN Plaza BART station&lt;/a&gt;,
or by any of a number of &lt;a href="https://www.sfmta.com/"&gt;Muni bus routes&lt;/a&gt; along Market
Street.&lt;/p&gt;

&lt;iframe width="600" height="450" frameborder="0" style="border:0; padding: 0.5em 0em;" src="https://www.google.com/maps/embed/v1/place?q=875%20Stevenson%20Street%2C%20San%20Francisco%2C%20CA%2094103%2C%20United%20States&amp;key=AIzaSyCvVSiXiD5D0wPQwoqFXTIRckhmD5Zk3ao" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Parking is available at the &lt;a href="https://www.google.com/maps/place/Fox+Plaza+Public+Parking+Garage/@37.7771814,-122.4176978,17z/data=!3m1!4b1!4m2!3m1!1s0x8085809c09d4de63:0xef4edd2f27698fee"&gt;Fox Plaza Public Parking Garage&lt;/a&gt;, the &lt;a href="https://www.google.com/maps/place/Civic+Center+Garage/@37.7802614,-122.4179613,17z/data=!3m1!4b1!4m2!3m1!1s0x8085809a2f67bb53:0x6511ff5de0e3c609"&gt;Civic Center
Garage&lt;/a&gt;, and several &lt;a href="http://en.parkopedia.com/parking/twitter_hq_market_street_san_francisco_ca_united_states/?ac=1&amp;amp;country=US&amp;amp;lat=37.776692&amp;amp;lng=-122.41678200000001"&gt;other locations in the area&lt;/a&gt;. A limited number of public bicycle rack spaces are
available on Market—please &lt;a href="mailto:finaglecon@twitter.com"&gt;contact us&lt;/a&gt; if you&amp;rsquo;d
like to arrange for secure bike parking.&lt;/p&gt;

&lt;p&gt;Although we&amp;rsquo;re no longer located at the same venue as the other
&lt;a href="http://scala.bythebay.io/"&gt;Scala by the Bay&lt;/a&gt; events, FinagleCon is of course still
a part of the larger Scala by the Bay conference, and all Scala by the Bay attendees
receive free registration for FinagleCon.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be getting started with breakfast at 8:30 AM on the morning of August 13
(stay tuned for the full program announcement tomorrow), and look forward to seeing you there!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing FinagleCon 2015</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2015/06/11/announcing-finaglecon/"/>
    <id>https://finagle.github.io/blog/2015/06/11/announcing-finaglecon/</id>
    <published>2015-06-10T17:00:00-07:00</published>
    <updated>2016-02-04T16:56:27-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday we opened registration and the call for participation for
&lt;a href="https://finagle.github.io/finaglecon/"&gt;FinagleCon&lt;/a&gt;, a new annual conference for the Finagle community.
This year&amp;rsquo;s conference will be a &lt;a href="http://scala.bythebay.io/"&gt;Scala by the Bay&lt;/a&gt; event hosted
&lt;a href="https://finagle.github.io/blog/2015/07/15/new-finaglecon-venue/"&gt;at Twitter HQ&lt;/a&gt; in San Francisco, and will take place on Thursday,
August 13, the day before Scala by the Bay begins.&lt;/p&gt;

&lt;p align="center"&gt;
  &lt;a href="http://scala.bythebay.io/"&gt;
    &lt;img src="http://scala.bythebay.io/cimages/ScalaByTheBay_logo.png" style="margin: 1em 0em;" alt="Scala by the Bay logo"/&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The conference program will include keynotes by Twitter&amp;rsquo;s
&lt;a href="https://twitter.com/marius"&gt;Marius Eriksen&lt;/a&gt; and SoundCloud&amp;rsquo;s &lt;a href="https://twitter.com/pcalcado"&gt;Phil Calçado&lt;/a&gt;, talks by Finagle
adopters and contributors, and workshops and tutorials on a range of
Finagle-related topics (including &lt;a href="https://github.com/twitter/finatra"&gt;Finatra&lt;/a&gt; and &lt;a href="https://github.com/finagle/finch"&gt;Finch&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d love to have your talk on the program, so if your
organization is using Finagle, send us a proposal! You&amp;rsquo;ll need to create a
&lt;a href="http://www.linuxfoundation.org/"&gt;Linux Foundation&lt;/a&gt; account if you don&amp;rsquo;t have one already (they&amp;rsquo;re helping us
host the event), and you&amp;rsquo;ll want to select &amp;ldquo;FinagleCon 2015&amp;rdquo; as the event when
filling out the &lt;a href="http://events.linuxfoundation.org/cfp/dashboard"&gt;Call for Participation form&lt;/a&gt;. The CFP will be open until
June 30, and we&amp;rsquo;ll be announcing the full program on July 13. Please
&lt;a href="mailto:finaglecon@twitter.com"&gt;let us know&lt;/a&gt; if you have any questions about the proposal process.&lt;/p&gt;

&lt;p&gt;All Scala by the Bay attendees will receive a discount code that will allow them
to register for FinagleCon for free, and Scala by the Bay registration is
&lt;a href="http://scala.bythebay.io/tickets.html"&gt;available at the regular price&lt;/a&gt; through June 16. Once you&amp;rsquo;re
registered for Scala by the Bay, please stay tuned for details about how to
register for FinagleCon with the discount code.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible to &lt;a href="https://www.regonline.com/Register/Checkin.aspx?EventID=1719477"&gt;register for FinagleCon independently&lt;/a&gt; if
you&amp;rsquo;re not attending Scala by the Bay (note that these tickets will not include
access to other Scala by the Bay events).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re also inviting organizations that are using Finagle to join the program as
sponsors. If you&amp;rsquo;re interested in sponsoring FinagleCon, please see
&lt;a href="https://finagle.github.io/finaglecon/sponsorship/prospectus.pdf"&gt;our prospectus&lt;/a&gt; and &lt;a href="mailto:finaglecon@twitter.com"&gt;get in touch over email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is our first time holding this event, so if you have questions please let
us know—we&amp;rsquo;re on Twitter at &lt;a href="https://twitter.com/finaglecon"&gt;@finaglecon&lt;/a&gt;, and you can also reach us
&lt;a href="mailto:finaglecon@twitter.com"&gt;by email&lt;/a&gt;. Help us make the first FinagleCon a success!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Finagle services made simple with Serial</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2015/02/06/finagle-services-made-simple-with-serial/"/>
    <id>https://finagle.github.io/blog/2015/02/06/finagle-services-made-simple-with-serial/</id>
    <published>2015-02-05T16:00:00-08:00</published>
    <updated>2016-02-04T16:56:27-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Most internal services at Twitter speak the &lt;a href="https://thrift.apache.org/"&gt;Thrift protocol&lt;/a&gt;, which
provides many benefits—once you&amp;rsquo;ve defined your data types and service
interfaces, for example, it&amp;rsquo;s possible to create bindings for a wide range of
programming languages, and Twitter&amp;rsquo;s &lt;a href="https://twitter.github.io/scrooge/"&gt;Scrooge&lt;/a&gt; in particular makes
it easy to create high-performance Finagle servers and clients for your Thrift
interfaces.&lt;/p&gt;

&lt;p&gt;In some cases, though, it would be more convenient not to have to worry about
things like interface description files, the build system plugins necessary to
generate bindings from them, etc. In particular, being able to define Finagle
services that take arbitrary types as inputs and outputs in a Scala REPL would
make writing tutorials and quickstart projects much more straightforward, and
would enable easier experimentation with other parts of the Finagle API.
&lt;/p&gt;

&lt;p&gt;With this in mind, &lt;a href="https://twitter.com/vkostyukov"&gt;Vladimir Kostyukov&lt;/a&gt; and I
decided to spend part of Twitter&amp;rsquo;s January 2015 Hack Week putting together a
library that would allow users to create Finagle clients and servers that use
Scala (or Java) libraries for serialization instead of IDL-based systems like
Thrift. The result was &lt;a href="https://github.com/finagle/finagle-serial"&gt;Finagle Serial&lt;/a&gt;, a new project in the &lt;a href="https://github.com/finagle"&gt;Finagle
organization&lt;/a&gt;. Serial is built on &lt;a href="https://twitter.github.io/finagle/guide/Protocols.html#mux"&gt;Mux&lt;/a&gt;, a generic
session-layer RPC protocol that supports multiplexing, and currently provides
support for using &lt;a href="https://github.com/scodec/scodec"&gt;Scodec&lt;/a&gt; for object serialization. Other
serialization libraries may be supported in the future, but we found that
Scodec worked well for the initial proof-of-concept implementation.&lt;/p&gt;

&lt;h2&gt;Starting a server&lt;/h2&gt;

&lt;p&gt;With Serial, you don&amp;rsquo;t need to describe your service interfaces using an
external IDL—instead you simply provide &lt;em&gt;codecs&lt;/em&gt; for your input and output
types. If you clone the &lt;a href="https://github.com/finagle/finagle-serial"&gt;Serial repository&lt;/a&gt; and &lt;a href="http://www.scala-sbt.org/0.13/tutorial/Setup.html"&gt;install
SBT&lt;/a&gt;, you can launch a REPL with the following command:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sbt &lt;span class="s2"&gt;"project scodec"&lt;/span&gt; console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then define and start a Finagle server with just a few lines of code:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Service&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.util.Future&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.github.finagle.serial.scodec.ScodecSerial&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.net.InetSocketAddress&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scodec.Codec&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scodec.codecs._&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ScodecSerial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;reciprocalServer&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serveFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InetSocketAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8123&lt;/span&gt;&lt;span class="o"&gt;))(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all—we now have a Finagle server running on port 8123 that will
return the floating-point reciprocal of any integer we pass to it.&lt;/p&gt;

&lt;p&gt;Note that all you need to be able to serve a Finagle &lt;code&gt;Service[Req, Rep]&lt;/code&gt; (or an
ordinary function from &lt;code&gt;Req&lt;/code&gt; to &lt;code&gt;Rep&lt;/code&gt;) is a pair of codecs for the &lt;code&gt;Req&lt;/code&gt; and
&lt;code&gt;Rep&lt;/code&gt; types.&lt;/p&gt;

&lt;p&gt;In this example, &lt;code&gt;int32&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are the Scodec codecs that we&amp;rsquo;ve decided
to use for the &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; input and output types. These are fairly simple,
but Scodec makes it possible to define more complex codecs with very little
boilerplate (see for example the ones for the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Greeting&lt;/code&gt; case classes
below).&lt;/p&gt;

&lt;p&gt;We can try out our server by defining and calling a client:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;reciprocal&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost:8123"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;reciprocal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1001&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"$result%.12f"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should print &lt;code&gt;0.000999000999&lt;/code&gt;, exactly as we&amp;rsquo;d expect.&lt;/p&gt;

&lt;h2&gt;Handling exceptions&lt;/h2&gt;

&lt;p&gt;Now for a slightly more interesting service:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ScodecSerial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variableSizeBits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;intParsingServer&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serveFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InetSocketAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8124&lt;/span&gt;&lt;span class="o"&gt;))(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toInt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;intParser&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost:8124"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;intParser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2015"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should print &lt;code&gt;2015&lt;/code&gt;. But the function that we&amp;rsquo;re serving is of course not
very well-behaved—it&amp;rsquo;ll throw an exception on strings that can&amp;rsquo;t be
parsed into integers. So what happens if we call our client with invalid input?&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;intParser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm not a number"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;onFailure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Too bad: $result"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the following:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="nc"&gt;Too&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;java.lang.NumberFormatException:&lt;/span&gt; &lt;span class="kt"&gt;For&lt;/span&gt; &lt;span class="kt"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="kt"&gt;I'm&lt;/span&gt; &lt;span class="kt"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we&amp;rsquo;re getting a &lt;code&gt;NumberFormatException&lt;/code&gt;, not a
&lt;a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.mux.ServerApplicationError"&gt;&lt;code&gt;ServerApplicationError&lt;/code&gt;&lt;/a&gt; or some other kind of Finagle-explicit exception
type. This is because the default Scodec protocol implementation knows how to
serialize a few common exception types so that they can be sent over the wire.&lt;/p&gt;

&lt;h2&gt;Using your own input, output, and error types&lt;/h2&gt;

&lt;p&gt;Using types you&amp;rsquo;ve defined as your service&amp;rsquo;s input and output is as easy as
providing codecs for those types, and you also can extend the functionality in
the default implementation with information about how to serialize your own
exception types. Custom error types requires a little more work than custom
input and output types, but it&amp;rsquo;s still fairly concise (and is likely to improve
in future iterations of the API).&lt;/p&gt;

&lt;p&gt;Suppose for example that we&amp;rsquo;ve got a simple user greeting service with a couple
of case classes and a custom error type:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Hello, ${u.name}!"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GreetingError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;GreetUser&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;User&lt;/span&gt;, &lt;span class="kt"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mary"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;GreetingError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"Unknown user: $other"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easy part is defining our codecs for our input and output case classes:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;userCodec&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Codec&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;variableSizeBits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uint24&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;greetingCodec&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Codec&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userCodec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to create a new &lt;code&gt;ScodecSerial&lt;/code&gt; instance to add support for our custom
error type, but then we&amp;rsquo;re done:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.github.finagle.serial.scodec.ApplicationErrorCodec&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;UserSerial&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;ScodecSerial&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;applicationErrorCodec&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;ApplicationErrorCodec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;GreetingError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;GreetingError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
    &lt;span class="o"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserSerial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userCodec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greetingCodec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InetSocketAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8125&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;GreetUser&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost:8125"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Mary will get a greeting and everyone else will get a &lt;code&gt;GreetingError&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mary"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res33&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;com.twitter.util.Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Mary&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Travis"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;onFailure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res34&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;com.twitter.util.Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Greeting&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nc"&gt;GreetingError&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unknown&lt;/span&gt; &lt;span class="kt"&gt;user:&lt;/span&gt; &lt;span class="kt"&gt;Travis&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any exceptions that the implementation doesn&amp;rsquo;t know how to serialize will result
in the exception&amp;rsquo;s message being wrapped in a Serial &lt;code&gt;ApplicationError&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Using Serial&lt;/h2&gt;

&lt;p&gt;Serial is a very young project, but Finagle and Mux are a good foundation to
build on, and we&amp;rsquo;d love to have other people give it a try.&lt;/p&gt;

&lt;p&gt;The API documentation is available on &lt;a href="https://finagle.github.io/finagle-serial/docs/#package"&gt;the project&amp;rsquo;s GitHub Pages site&lt;/a&gt;,
and the project&amp;rsquo;s &lt;a href="https://github.com/finagle/finagle-serial"&gt;README&lt;/a&gt; presents some initial benchmarks and goes
into more detail on topics like exception serialization. If you&amp;rsquo;re interested in
writing an implementation for another serialization library, we&amp;rsquo;ve put together
some &lt;a href="https://www.scalacheck.org/"&gt;ScalaCheck&lt;/a&gt;-based integration testing tools that can help you
verify that it&amp;rsquo;s working correctly.&lt;/p&gt;

&lt;p&gt;Please let us know if you have any questions, either by filing a GitHub issue or
getting in touch through &lt;a href="https://twitter.com/finagle"&gt;@finagle&lt;/a&gt; or the
&lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;Finaglers mailing list&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
</feed>
